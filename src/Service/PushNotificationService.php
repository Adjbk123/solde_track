<?php

namespace App\Service;

use Kreait\Firebase\Factory;
use Kreait\Firebase\Messaging\CloudMessage;
use Kreait\Firebase\Messaging\Notification;
use Kreait\Firebase\Exception\MessagingException;
use Psr\Log\LoggerInterface;

class PushNotificationService
{
    private $messaging;
    private $logger;

    public function __construct(LoggerInterface $logger)
    {
        $this->logger = $logger;
        
        // Chemin vers le fichier de configuration Firebase
        $firebaseConfigPath = dirname(__DIR__, 2) . '/config/firebase/firebase-service-account.json';
        
        try {
            $factory = (new Factory)->withServiceAccount($firebaseConfigPath);
            $this->messaging = $factory->createMessaging();
        } catch (\Exception $e) {
            $this->logger->error('Erreur initialisation Firebase: ' . $e->getMessage());
            throw $e;
        }
    }

    /**
     * Envoie une notification push
     */
    public function sendNotification(string $fcmToken, string $title, string $body, array $data = []): bool
    {
        try {
            $notification = Notification::create($title, $body);
            
            $message = CloudMessage::withTarget('token', $fcmToken)
                ->withNotification($notification);

            // Ajouter les donn√©es personnalis√©es si elles existent
            if (!empty($data)) {
                $message = $message->withData($data);
            }

            $this->messaging->send($message);
            
            $this->logger->info('Notification envoy√©e avec succ√®s', [
                'fcm_token' => substr($fcmToken, 0, 20) . '...',
                'title' => $title
            ]);
            
            return true;
            
        } catch (MessagingException $e) {
            $this->logger->error('Erreur envoi notification FCM: ' . $e->getMessage(), [
                'fcm_token' => substr($fcmToken, 0, 20) . '...',
                'title' => $title,
                'error_code' => $e->getCode()
            ]);
            return false;
        } catch (\Exception $e) {
            $this->logger->error('Erreur g√©n√©rale envoi notification: ' . $e->getMessage());
            return false;
        }
    }

    /**
     * Envoie une notification de motivation
     */
    public function sendMotivationNotification(string $fcmToken, string $userName, string $currency = 'XOF'): bool
    {
        $messages = [
            "üî• Bravo ! 5 jours de suivi parfait, tu g√®res !",
            "üí™ Keep going ! Ton budget est sous contr√¥le !",
            "üòé Tu es un vrai boss du cash üí∞ !",
            "üéâ Petite victoire : toutes tes d√©penses sont √† jour !",
            "üí° Astuce : noter chaque d√©pense = pouvoir üí™",
            "‚ö° Motivation du jour : reste r√©gulier ! ‚ú®",
            "üöÄ Suivi actif = objectifs atteints !",
            "ü•≥ F√©licitations ! Tu respectes ton plan budget !",
            "üí∞ Chaque action compte‚Ä¶ continue comme √ßa !",
            "üëÄ Garder le contr√¥le = succ√®s assur√© !"
        ];

        $title = "üí™ Motivation SoldeTrack";
        $body = $messages[array_rand($messages)];

        $data = [
            'type' => 'motivation',
            'user_name' => $userName,
            'currency' => $currency,
            'timestamp' => time()
        ];

        return $this->sendNotification($fcmToken, $title, $body, $data);
    }

    /**
     * Envoie une notification de revenu
     */
    public function sendIncomeNotification(string $fcmToken, string $userName, float $amount, string $currency = 'XOF'): bool
    {
        $messages = [
            "üíµ F√©licitations ! Tu as re√ßu " . number_format($amount) . " {$currency}.",
            "ü§ë Nouveau revenu : " . number_format($amount) . " {$currency} ajout√© √† ton solde !",
            "üí∏ Argent entr√© ! V√©rifie ton solde pour " . number_format($amount) . " {$currency}.",
            "üî• Solde boost√© : " . number_format($amount) . " {$currency} ajout√© !",
            "üí∞ Jackpot ! " . number_format($amount) . " {$currency} disponible maintenant.",
            "üòé Revenu re√ßu : " . number_format($amount) . " {$currency} ‚Üí g√®re-le bien !",
            "üìà Ton argent travaille pour toi : " . number_format($amount) . " {$currency} ajout√©.",
            "‚ö° Nouveau cash : " . number_format($amount) . " {$currency}, tu peux le suivre.",
            "üí≥ Revenu enregistr√© : " . number_format($amount) . " {$currency}.",
            "üìå Heads up ! " . number_format($amount) . " {$currency} a √©t√© cr√©dit√© sur ton compte."
        ];

        $title = "üí∞ Nouveau Revenu";
        $body = $messages[array_rand($messages)];

        $data = [
            'type' => 'income',
            'user_name' => $userName,
            'amount' => $amount,
            'currency' => $currency,
            'timestamp' => time()
        ];

        return $this->sendNotification($fcmToken, $title, $body, $data);
    }

    /**
     * Envoie une notification de rappel de dette
     */
    public function sendDebtReminderNotification(string $fcmToken, string $userName, string $debtName, float $amount, string $dueDate, string $currency = 'XOF'): bool
    {
        $messages = [
            "üòÖ H√© boss, {$debtName} attend encore " . number_format($amount) . " {$currency}. √âch√©ance le {$dueDate} !",
            "‚ö†Ô∏è Oups ! " . number_format($amount) . " {$currency} √† rembourser √† {$debtName}. D√©p√™che-toi !",
            "üí∏ Ton budget te dit de r√©gler " . number_format($amount) . " {$currency} √† {$debtName} avant le {$dueDate}.",
            "üî• Rappel amical : {$debtName} attend " . number_format($amount) . " {$currency}. G√®re √ßa !",
            "üïí Tic-tac‚Ä¶ " . number_format($amount) . " {$currency} √† {$debtName} √† payer avant {$dueDate} !",
            "üòé N'oublie pas ta dette de " . number_format($amount) . " {$currency} pour {$debtName}.",
            "üí™ Allez, c'est le moment de rembourser " . number_format($amount) . " {$currency} √† {$debtName} !",
            "üìå Petit rappel : " . number_format($amount) . " {$currency} √† {$debtName}, reste concentr√© !",
            "ü§ë " . number_format($amount) . " {$currency} √† {$debtName} ‚Üí on ne tra√Æne pas !",
            "üëÄ Hey, {$debtName} attend " . number_format($amount) . " {$currency}. √Ä toi de jouer !"
        ];

        $title = "‚ö†Ô∏è Rappel de Dette";
        $body = $messages[array_rand($messages)];

        $data = [
            'type' => 'debt_reminder',
            'user_name' => $userName,
            'debt_name' => $debtName,
            'amount' => $amount,
            'due_date' => $dueDate,
            'currency' => $currency,
            'timestamp' => time()
        ];

        return $this->sendNotification($fcmToken, $title, $body, $data);
    }

    /**
     * Envoie une notification de rappel de d√©pense
     */
    public function sendExpenseReminderNotification(string $fcmToken, string $userName): bool
    {
        $messages = [
            "üí∏ N'oublie pas de noter ta d√©pense d'hier !",
            "üëÄ H√©, ton portefeuille est triste‚Ä¶ note ta derni√®re d√©pense !",
            "üìã Petit rappel : ajoute ta d√©pense pour garder le contr√¥le.",
            "üî• Ton suivi cash t'attend, note tes d√©penses !",
            "üïí D√©pense oubli√©e ? Mets-la vite dans SoldeTrack !",
            "üòÖ On reste s√©rieux : note ta d√©pense maintenant !",
            "üí™ Suivi parfait = budget au top. Ajoute tes d√©penses !",
            "‚ö° Petit rappel rapide : ta d√©pense n'est pas enregistr√©e !",
            "üí∞ Chaque d√©pense compte. Note-la !",
            "üìå Action rapide : ta d√©pense attend dans l'app !"
        ];

        $title = "üí∏ Rappel D√©pense";
        $body = $messages[array_rand($messages)];

        $data = [
            'type' => 'expense_reminder',
            'user_name' => $userName,
            'timestamp' => time()
        ];

        return $this->sendNotification($fcmToken, $title, $body, $data);
    }

    /**
     * Envoie une notification d'alerte de projet
     */
    public function sendProjectAlertNotification(string $fcmToken, string $userName, string $projectName, float $amount, string $currency = 'XOF'): bool
    {
        $messages = [
            "üêî Projet {$projectName} : attention, budget d√©pass√© !",
            "‚ö†Ô∏è D√©pense sur {$projectName} ‚Üí surveille ton solde !",
            "üí° Petit rappel pour {$projectName} : contr√¥le ton budget !",
            "üî• Projet {$projectName} : nouvelle d√©pense enregistr√©e.",
            "üí∏ " . number_format($amount) . " {$currency} d√©pens√© pour {$projectName}.",
            "üìå Suivi projet : {$projectName} a une d√©pense inattendue !",
            "üí™ Objectif projet : garde {$projectName} sous contr√¥le !",
            "üòé Projet {$projectName} ‚Üí attention √† ton budget !",
            "‚ö° Alerte : {$projectName} approche limite budget.",
            "üìã Nouveau mouvement dans {$projectName} : v√©rifie !"
        ];

        $title = "üìä Alerte Projet";
        $body = $messages[array_rand($messages)];

        $data = [
            'type' => 'project_alert',
            'user_name' => $userName,
            'project_name' => $projectName,
            'amount' => $amount,
            'currency' => $currency,
            'timestamp' => time()
        ];

        return $this->sendNotification($fcmToken, $title, $body, $data);
    }

    /**
     * Envoie une notification d'alerte de solde
     */
    public function sendBalanceAlertNotification(string $fcmToken, string $userName, float $balance, string $currency = 'XOF'): bool
    {
        $messages = [
            "‚ö†Ô∏è Attention, ton solde est bas : " . number_format($balance) . " {$currency} restant !",
            "üí∏ Solde actuel : " . number_format($balance) . " {$currency}. Prudence sur tes d√©penses !",
            "üî• Rappel : " . number_format($balance) . " {$currency} restant ‚Üí planifie bien !",
            "üòÖ Solde presque vide : " . number_format($balance) . " {$currency} disponible.",
            "üí™ Petit check : " . number_format($balance) . " {$currency} dans le compte, g√®re bien !",
            "üìå Heads up ! Ton solde = " . number_format($balance) . " {$currency}.",
            "üïí Temps de surveiller ton argent : " . number_format($balance) . " {$currency} restant.",
            "üí≥ Solde critique : " . number_format($balance) . " {$currency} ‚Üí attention au budget !",
            "‚ö° Balance Alert : " . number_format($balance) . " {$currency} ‚Üí reste strat√©gique !",
            "üëÄ Solde = " . number_format($balance) . " {$currency}, planifie tes d√©penses !"
        ];

        $title = "‚ö†Ô∏è Alerte Solde";
        $body = $messages[array_rand($messages)];

        $data = [
            'type' => 'balance_alert',
            'user_name' => $userName,
            'balance' => $balance,
            'currency' => $currency,
            'timestamp' => time()
        ];

        return $this->sendNotification($fcmToken, $title, $body, $data);
    }

    /**
     * Teste la connexion Firebase
     */
    public function testConnection(): array
    {
        try {
            // Test simple de connexion
            $factory = (new Factory)->withServiceAccount(dirname(__DIR__, 2) . '/config/firebase/firebase-service-account.json');
            $messaging = $factory->createMessaging();
            
            return [
                'status' => 'success',
                'message' => 'Connexion Firebase r√©ussie',
                'project_id' => 'soldetrack'
            ];
        } catch (\Exception $e) {
            return [
                'status' => 'error',
                'message' => 'Erreur connexion Firebase: ' . $e->getMessage()
            ];
        }
    }
}
